{
    "docs": [
        {
            "location": "/",
            "text": "Have a pleasant flight!\n\n\nAirlane is fast and confortable developing enveronments for Node.js. You don't need to prepare Gulp, Browserify, Nodemon, Babel, Express, Mocha...and sort of things. You can start development with Node.js quickly!\n\n\nFeatures\n\n\n\n\nDatabase with O/R mapper (\nSequelize\n)\n\n\nEach routing has own View, Routing and Controller\n\n\nCode generator\n\n\nProject initializer/Controller/Model(DB/Mailer)\n\n\nSupport ES2015\n\n\nServer side/Web Browser\n\n\nDevelopment server\n\n\nChrome inspector\n\n\nAuto reload/Auto re-deploy\n\n\nWatchify\n\n\nClient side JavaScript/Stylesheet\n\n\nTest\n\n\nMocha\n\n\n\n\nGetting started",
            "title": "Top"
        },
        {
            "location": "/#have-a-pleasant-flight",
            "text": "Airlane is fast and confortable developing enveronments for Node.js. You don't need to prepare Gulp, Browserify, Nodemon, Babel, Express, Mocha...and sort of things. You can start development with Node.js quickly!",
            "title": "Have a pleasant flight!"
        },
        {
            "location": "/#features",
            "text": "Database with O/R mapper ( Sequelize )  Each routing has own View, Routing and Controller  Code generator  Project initializer/Controller/Model(DB/Mailer)  Support ES2015  Server side/Web Browser  Development server  Chrome inspector  Auto reload/Auto re-deploy  Watchify  Client side JavaScript/Stylesheet  Test  Mocha",
            "title": "Features"
        },
        {
            "location": "/#getting-started",
            "text": "",
            "title": "Getting started"
        },
        {
            "location": "/getting-started/",
            "text": "Let's aboard!\n\n\nInstall airlane\n\n\nYou can install the airlane with npm command below.\n\n\nnpm install airlane -g\n\n\n\n\nGenerate project\n\n\nAfter installing, you can make a project.\n\n\ncd /path/to/some/where\nairlane init hello\ncd hello\nnpm install\n\n\n\n\nAirlane generates some files and directory.\n\n\n$ tree .\n.\n\u251c\u2500\u2500 config.js\n\u251c\u2500\u2500 modules\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 routes\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 controller.js\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 index.js\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 public\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 app.css\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 app.js\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 test\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 controller_test.js\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 views\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 edit.jade\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 index.jade\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 layout.jade\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 new.jade\n\u2514\u2500\u2500 tmp\n\n6 directories, 11 files\n\n\n\n\nLaunch server\n\n\nLet's launch the server!\n\n\nairlane serve\n\n\n\n\nNow, you can access to the web server \nhttp://localhost:8080/\n.\n\n\n\n\nConglaturations! You were aboarding Airlane!\n\n\nNext is \nupdate view",
            "title": "Getting started"
        },
        {
            "location": "/getting-started/#lets-aboard",
            "text": "",
            "title": "Let's aboard!"
        },
        {
            "location": "/getting-started/#install-airlane",
            "text": "You can install the airlane with npm command below.  npm install airlane -g",
            "title": "Install airlane"
        },
        {
            "location": "/getting-started/#generate-project",
            "text": "After installing, you can make a project.  cd /path/to/some/where\nairlane init hello\ncd hello\nnpm install  Airlane generates some files and directory.  $ tree .\n.\n\u251c\u2500\u2500 config.js\n\u251c\u2500\u2500 modules\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 routes\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 controller.js\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 index.js\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 public\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 app.css\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 app.js\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 test\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 controller_test.js\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 views\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 edit.jade\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 index.jade\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 layout.jade\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 new.jade\n\u2514\u2500\u2500 tmp\n\n6 directories, 11 files",
            "title": "Generate project"
        },
        {
            "location": "/getting-started/#launch-server",
            "text": "Let's launch the server!  airlane serve  Now, you can access to the web server  http://localhost:8080/ .   Conglaturations! You were aboarding Airlane!  Next is  update view",
            "title": "Launch server"
        },
        {
            "location": "/update-view/",
            "text": "Update view\n\n\nAirlane has supported jade template (It's default, you can change template engine you like). Your index file localed to \nhello/routes/views/index.jade\n.\n\n\nEdit index.jade, Web browser reloads view automatically.\n\n\n\n\nAuto re-deply\n\n\nWhen you edit server-side JavaScript code, Airlane immediately reflects it. You don't need to restart server by hands.\n\n\nAuto generate client-side JavaScript and Stylesheet\n\n\nAirlane supports ECMA2016 JavaScript on Web browser. It's convert to ECMA5 by babel. And Airlane provides browserify, so you can use npm module in your client JavaScript code. Normarl JavaScript code is generated by Airlane automatically. Your JavaScript locates to \nhello/routes/public/app.js\n, and converted file locales to \nhello/routes/public/app.min.js\n. This JavaScript file is loaded by HTML file in \nhello/routes/views/layout.jade\n, so you don't need care about it.\n\n\nnpm with JavaScript\n\n\nYou can use client JavaScript with npm packages such as bootstrap, react, jQuery, or Vue. If you want to use bootstrap, at first you should install bootstrap on npm.\n\n\nnpm install bootstrap --save\n\n\n\n\nAnd you write code in your JavaScript file located \nhello/routes/public/app.js\n.\n\n\nglobal.jQuery = global.$ = require('jquery');\nrequire('bootstrap');\n\n\n\n\nYour JavaScript file \nhello/routes/public/app.min.js\n will update soon, and you can use it.\n\n\nECMA2016 code syntax\n\n\nAirlane supports ECMA2016 syntax in client JavaScript. When you use jQuery, you can write it like below to \nhello/routes/public/app.js\n.\n\n\n$(() => {\n  $(\"a\").each((i, k) => {\n    this.on('click', e => {\n      // You code is here.\n    })\n  });\n})\n\n\n\n\nThose code are converted to ECMA5 JavaScript by Babel. Generated code located to \nhello/routes/public/app.min.js\n.\n\n\nnpm with Stylesheet\n\n\nAirlane supports load stylesheet file in npm package, too. It's limited feature, but it supports bootstrap. If you want to use bootstrap, execute command first.\n\n\nnpm install bootstrap --save\n\n\n\n\nAnd you write a line in your stylesheet file located \nhello/routes/public/app.css\n.\n\n\n@import bootstrap;\n\n\n\n\nYour stylesheet file \nhello/routes/public/app.min.css\n will update soon with bootstrap stylesheet.",
            "title": "Update view"
        },
        {
            "location": "/update-view/#update-view",
            "text": "Airlane has supported jade template (It's default, you can change template engine you like). Your index file localed to  hello/routes/views/index.jade .  Edit index.jade, Web browser reloads view automatically.",
            "title": "Update view"
        },
        {
            "location": "/update-view/#auto-re-deply",
            "text": "When you edit server-side JavaScript code, Airlane immediately reflects it. You don't need to restart server by hands.",
            "title": "Auto re-deply"
        },
        {
            "location": "/update-view/#auto-generate-client-side-javascript-and-stylesheet",
            "text": "Airlane supports ECMA2016 JavaScript on Web browser. It's convert to ECMA5 by babel. And Airlane provides browserify, so you can use npm module in your client JavaScript code. Normarl JavaScript code is generated by Airlane automatically. Your JavaScript locates to  hello/routes/public/app.js , and converted file locales to  hello/routes/public/app.min.js . This JavaScript file is loaded by HTML file in  hello/routes/views/layout.jade , so you don't need care about it.",
            "title": "Auto generate client-side JavaScript and Stylesheet"
        },
        {
            "location": "/update-view/#npm-with-javascript",
            "text": "You can use client JavaScript with npm packages such as bootstrap, react, jQuery, or Vue. If you want to use bootstrap, at first you should install bootstrap on npm.  npm install bootstrap --save  And you write code in your JavaScript file located  hello/routes/public/app.js .  global.jQuery = global.$ = require('jquery');\nrequire('bootstrap');  Your JavaScript file  hello/routes/public/app.min.js  will update soon, and you can use it.",
            "title": "npm with JavaScript"
        },
        {
            "location": "/update-view/#ecma2016-code-syntax",
            "text": "Airlane supports ECMA2016 syntax in client JavaScript. When you use jQuery, you can write it like below to  hello/routes/public/app.js .  $(() => {\n  $(\"a\").each((i, k) => {\n    this.on('click', e => {\n      // You code is here.\n    })\n  });\n})  Those code are converted to ECMA5 JavaScript by Babel. Generated code located to  hello/routes/public/app.min.js .",
            "title": "ECMA2016 code syntax"
        },
        {
            "location": "/update-view/#npm-with-stylesheet",
            "text": "Airlane supports load stylesheet file in npm package, too. It's limited feature, but it supports bootstrap. If you want to use bootstrap, execute command first.  npm install bootstrap --save  And you write a line in your stylesheet file located  hello/routes/public/app.css .  @import bootstrap;  Your stylesheet file  hello/routes/public/app.min.css  will update soon with bootstrap stylesheet.",
            "title": "npm with Stylesheet"
        },
        {
            "location": "/database/",
            "text": "How to use database on Airlane\n\n\nAirlane supports some database systems.\n\n\n\n\nSQLite3\n\n\nMySQL/MariaDB\n\n\nPostgreSQL\n\n\nMS SQL\n\n\n\n\nAirlane uses O/R mapper named \nSequelize\n. If you want to know about how to use the Sequelize, you should read their document.\n\n\nGenerate base model\n\n\nYou can generate skeleton code with command.\n\n\nairlane generate model db task\n\n\n\n\nThis command generates a JavaScript file located to \nhello/modules/db/task.js\n.\n\n\nmodule.exports = (options) => {\n  var database = options.database;\n  var Sequelize = database.Sequelize;\n  var db = database.database;\n\n  var Task = db.define('tasks', {\n    id: {\n      type: Sequelize.INTEGER,\n      autoIncrement: true,\n      primaryKey: true\n    },\n    created_at: {\n      type: Sequelize.DATE,\n      default: new Date\n    },\n    updated_at: {\n      type: Sequelize.DATE,\n      default: new Date\n    }\n  }, {\n    freezeTableName: true\n  });\n\n  Task.sync().then(() => {\n  });\n\n  Task.role = 'Task';\n  return Task;\n}\n\n\n\n\nBase code has 3 colmuns.\n\n\n\n\nid\n \nUnique key.\n\n\ncreated_at\n\nCreated time. You should never update it.\n\n\nupdated_at\n\nLast updated time. You should update it with data updates.\n\n\n\n\nUsing model with controller\n\n\nroutes/index.js\n has database variable.\n\n\nmodule.exports = module => {\n  /*\n    Database module\n    module.Db.Sequelize\n    module.Db.db\n  */\n  :\n}\n\n\n\n\nSo, you change the code like below.\n\n\nBefore:\n\n\nrouter.get('/', (req, res, next) => {\n  controller.index(req, res, next);\n});\n\n\n\n\nAfter:\n\n\nrouter.get('/', (req, res, next) => {\n  controller.index(req, res, module.Db, next);\n});\n\n\n\n\nAnd change \nroutes/controler.js\n.\n\n\n// GET /\nindex(req, res, Db, next) {\n  let Task = Db.Task;\n  Task.findAll()\n    .then( tasks => {\n      res.render('index', {tasks: tasks}); \n    });\n}\n\n\n\n\nThen, you can use database easily.",
            "title": "Database"
        },
        {
            "location": "/database/#how-to-use-database-on-airlane",
            "text": "Airlane supports some database systems.   SQLite3  MySQL/MariaDB  PostgreSQL  MS SQL   Airlane uses O/R mapper named  Sequelize . If you want to know about how to use the Sequelize, you should read their document.",
            "title": "How to use database on Airlane"
        },
        {
            "location": "/database/#generate-base-model",
            "text": "You can generate skeleton code with command.  airlane generate model db task  This command generates a JavaScript file located to  hello/modules/db/task.js .  module.exports = (options) => {\n  var database = options.database;\n  var Sequelize = database.Sequelize;\n  var db = database.database;\n\n  var Task = db.define('tasks', {\n    id: {\n      type: Sequelize.INTEGER,\n      autoIncrement: true,\n      primaryKey: true\n    },\n    created_at: {\n      type: Sequelize.DATE,\n      default: new Date\n    },\n    updated_at: {\n      type: Sequelize.DATE,\n      default: new Date\n    }\n  }, {\n    freezeTableName: true\n  });\n\n  Task.sync().then(() => {\n  });\n\n  Task.role = 'Task';\n  return Task;\n}  Base code has 3 colmuns.   id  \nUnique key.  created_at \nCreated time. You should never update it.  updated_at \nLast updated time. You should update it with data updates.",
            "title": "Generate base model"
        },
        {
            "location": "/database/#using-model-with-controller",
            "text": "routes/index.js  has database variable.  module.exports = module => {\n  /*\n    Database module\n    module.Db.Sequelize\n    module.Db.db\n  */\n  :\n}  So, you change the code like below.  Before:  router.get('/', (req, res, next) => {\n  controller.index(req, res, next);\n});  After:  router.get('/', (req, res, next) => {\n  controller.index(req, res, module.Db, next);\n});  And change  routes/controler.js .  // GET /\nindex(req, res, Db, next) {\n  let Task = Db.Task;\n  Task.findAll()\n    .then( tasks => {\n      res.render('index', {tasks: tasks}); \n    });\n}  Then, you can use database easily.",
            "title": "Using model with controller"
        },
        {
            "location": "/test/",
            "text": "Test with Airlane\n\n\nAirlace includes unit test framework named \nMocha\n. When you generated project code, you can start test soon.\n\n\nairlane test\n 3   -_-__,------,\n 0   -_-__|  /\\_/\\ \n 0   -_-_~|_( ^ .^) \n     -_-_ \"\"  \"\" \n\n  3 passing (390ms)\n\n\n\n\nTest code localed to \nhello/routes/test/controller_test.js\n. And Airlane provides some variouses.\n\n\n\n\n\n\n\n\nLibrary\n\n\nVarious\n\n\n\n\n\n\n\n\n\n\nModule(Database or Mailer)\n\n\nm\n\n\n\n\n\n\nairlane_path\n\n\nPath to your installed airlane\n\n\n\n\n\n\n\n\nIf you want to write test code, please check \nMocha\n documents.",
            "title": "Test"
        },
        {
            "location": "/test/#test-with-airlane",
            "text": "Airlace includes unit test framework named  Mocha . When you generated project code, you can start test soon.  airlane test\n 3   -_-__,------,\n 0   -_-__|  /\\_/\\ \n 0   -_-_~|_( ^ .^) \n     -_-_ \"\"  \"\" \n\n  3 passing (390ms)  Test code localed to  hello/routes/test/controller_test.js . And Airlane provides some variouses.     Library  Various      Module(Database or Mailer)  m    airlane_path  Path to your installed airlane     If you want to write test code, please check  Mocha  documents.",
            "title": "Test with Airlane"
        },
        {
            "location": "/routing/",
            "text": "Add routing\n\n\nWhen you want to add new routing, you can use generate command.\n\n\nairlane generate route users\n\n\n\n\nThis command generates files under \nroutes/users\n directory.\n\n\n$ tree routes/users/\nroutes/users/\n\u251c\u2500\u2500 controller.js\n\u251c\u2500\u2500 index.js\n\u251c\u2500\u2500 public\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 app.css\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 app.js\n\u251c\u2500\u2500 test\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 controller_test.js\n\u2514\u2500\u2500 views\n    \u251c\u2500\u2500 edit.jade\n    \u251c\u2500\u2500 index.jade\n    \u251c\u2500\u2500 layout.jade\n    \u2514\u2500\u2500 new.jade\n\n\n\n\nIt's almost same routes directory. Each directory has controller/router/JavaScript and Stylesheet/View and Test. Looks like micro service.\n\n\nAfter execute command, you have routing \nhttp://localhost:8080/users/\n with RESTful(GET/POST/PUT/DELETE).\n\n\nAccess client side JavaScript and stylesheet from Web browser\n\n\nIf you want to access \nroutes/users/public/app.js\n or \napp.css\n from web browser, you should write like below.\n\n\n\n\n/users/app.min.js\n\n\n/users/app.min.css\n\n\n\n\nOf cause \nroutes/users/views/layout.jade\n has those lines.\n\n\nlink(rel=\"stylesheet\", type=\"text/css\", href=\"/users/app.min.css\")\nscript(src=\"/users/app.min.js\")",
            "title": "Add routing"
        },
        {
            "location": "/routing/#add-routing",
            "text": "When you want to add new routing, you can use generate command.  airlane generate route users  This command generates files under  routes/users  directory.  $ tree routes/users/\nroutes/users/\n\u251c\u2500\u2500 controller.js\n\u251c\u2500\u2500 index.js\n\u251c\u2500\u2500 public\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 app.css\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 app.js\n\u251c\u2500\u2500 test\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 controller_test.js\n\u2514\u2500\u2500 views\n    \u251c\u2500\u2500 edit.jade\n    \u251c\u2500\u2500 index.jade\n    \u251c\u2500\u2500 layout.jade\n    \u2514\u2500\u2500 new.jade  It's almost same routes directory. Each directory has controller/router/JavaScript and Stylesheet/View and Test. Looks like micro service.  After execute command, you have routing  http://localhost:8080/users/  with RESTful(GET/POST/PUT/DELETE).",
            "title": "Add routing"
        },
        {
            "location": "/routing/#access-client-side-javascript-and-stylesheet-from-web-browser",
            "text": "If you want to access  routes/users/public/app.js  or  app.css  from web browser, you should write like below.   /users/app.min.js  /users/app.min.css   Of cause  routes/users/views/layout.jade  has those lines.  link(rel=\"stylesheet\", type=\"text/css\", href=\"/users/app.min.css\")\nscript(src=\"/users/app.min.js\")",
            "title": "Access client side JavaScript and stylesheet from Web browser"
        },
        {
            "location": "/tutorials/todo/",
            "text": "Making todo app\n\n\nThis page explains how to make a todo app with Airlane.\n\n\nSetup\n\n\nInstall Airlane with npm. At first You have to install Node.js.\n\n\nnpm install airlane -g\n\n\n\n\nAfter installation, create project and setup it.\n\n\n$ airlane init todo\n$ cd todo/\n$ npm install\n\n\n\n\nCreate module\n\n\nYou should create a database table named \"Task\". Airlane have provided O/R mapper and model generator.\n\n\n$ airlane generate model db task\n/path/to/todo/modules/db/task.js created.\n/path/to/todo/migrations/001-create-tasks.js created.\n\n\n\n\nEdit migration file \n/path/to/todo/migrations/001-create-tasks.js\n.\n\n\nBefore:\n**\n\n\nexports.up = function(next){\n  this.createTable('tasks', {\n      id         : { type : \"serial\", key: true }, // auto increment\n      created_at : { type : \"date\", time:true, required: true },\n      updated_at : { type : \"date\", time:true, required: true }\n  }, next);\n};\n\nexports.down = function(next){\n  this.dropTable('tasks', next);\n};\n\n\n\n\nAfter:\n\n\nexports.up = function(next){\n  this.createTable('tasks', {\n      id         : { type : \"serial\", key: true }, // auto increment\n      name       : { type : \"text\", required: true}, // Add this line\n      created_at : { type : \"date\", time:true, required: true },\n      updated_at : { type : \"date\", time:true, required: true }\n  }, next);\n};\n\nexports.down = function(next){\n  this.dropTable('tasks', next);\n};\n\n\n\n\nAlso edit model file \n/path/to/todo/modules/db/task.js\n.\n\n\nBefore:\n\n\nmodule.exports = (options) => {\n  return new Promise((res, rej) => {\n    var db = options.database;\n    var Task = db.define('tasks', {\n        id: { type: \"serial\", key: true },\n        created_at: { type: \"date\", time: true, defaultValue: (new Date)},\n        updated_at: { type: \"date\", time: true, defaultValue: (new Date)}\n      });\n    res({Task: Task});\n  })\n}\n\n\n\n\nAfter:\n\n\nmodule.exports = (options) => {\n  return new Promise((res, rej) => {\n    var db = options.database;\n    var Task = db.define('tasks', {\n        id: { type: \"serial\", key: true },\n        name: { type: \"text\", required: true }, // Add this line\n        created_at: { type: \"date\", time: true, defaultValue: (new Date)},\n        updated_at: { type: \"date\", time: true, defaultValue: (new Date)}\n      });\n    res({Task: Task});\n  })\n}\n\n\n\n\nAfter editing, execute migration up command.\n\n\n$ airlane migration up\n  up : 001-create-tasks.js\n  migration : complete\n\n\n\n\nIf you got some errors, you can try migration again after fix problems.\n\n\n$ airlane migration down # This command do migration down\n$ airlane migration redo # This command do migration down and up.\n\n\n\n\nImport bootstrap\n\n\nTodo app uses bootstrap for design template. You should install it using npm command.\n\n\n$ npm install bootstrap --save\n\n\n\n\nAfter installed, update JavaScript file \nroutes/public/app.js\n*\n\n\nglobal.jQuery = global.$ = require('jquery');\nrequire('bootstrap');\n$(() => {\n});\n\n\n\n\nAnd \nroutes/public/app.css\n.\n\n\n@import bootstrap;\n\n\n\n\nLaunch server\n\n\nOK. You are ready to launch the server!\n\n\n$ airlane serve\n\n\n\n\nAnd access to \nhttp://localhost:8080/\n.\n\n\nRouter and controller\n\n\nWhen you access to \nhttp://localhost:8080/\n, Router that located \nroutes/index.js\n is called index action.\n\n\n// GET /\n// Show index page\nrouter.get('/', (req, res, next) => {\n  controller.index(req, res, module.db, next);\n});\n\n\n\n\nAnd router call the controller index action.\n\n\n// GET /\nindex(req, res, next) {\n  res.render('index'); \n}\n\n\n\n\nResponse object (res) called render method with index. It means response uses \nroutes/views/index.jade\n* for rendering.\n\n\nYou will update those files.\n\n\nUpdate view\n\n\nNext step, you are editing view file located \nroutes/views/index.jade\n like below. Airlane supports jade template (it's default). And this is bootstrap style class and format.\n\n\nextends ./layout\nblock title\n  title Todo app\nblock body\n  div.container\n    div.row\n      div.col-md-8.col-md-offset-2\n        h1 Todo App\n        form(action=\"/\", method=\"POST\")\n          div.form-group\n            label(for=inputTask) Task name\n            input.form-control(name=\"name\", type=\"text\",placeholder=\"Study airlane\")\n          button.btn.btn-default(type=submit) Register task\n    div.row\n      div.col-md-8.col-md-offset-2\n        if tasks.length < 2\n          h2 #{tasks.length} Task\n        else\n          h2 #{tasks.length} Tasks\n\n        each task in tasks\n          div.row\n            div.col-md-3.col-md-offset-1\n              div #{task.name} \n            div.col-md-2\n              span\n                form(action=\"/#{task.id}\",method=\"POST\")\n                  input.hidden(name=\"_method\",value=\"DELETE\")\n                  button.btn.btn-ms.btn-default done\n\n\n\n\nYou can recognize a various \ntasks\n that provides from controller.\n\n\nEdit controller#index\n\n\nYou should edit controller file located \nroutes/controller.js\n for access to \nGET /\n.\n\n\nindex(req, res, next) {\n  let Task = module.db.Task;\n  Task.find((err, tasks) => {\n    if (err) throw err;\n    res.render('index', {tasks: tasks}); \n  });\n}\n\n\n\n\nEdit controller#post\n\n\nNext is create action. It is called by \nPOST /\n action.\n\n\n// POST /\ncreate(req, res, next) {\n  let Task = module.db.Task;\n  Task.create({\n    name: req.body.name\n  }, (err, task) => {\n    if (err) throw err;\n    res.redirect(\"/\");\n  })\n}\n\n\n\n\nEdit controller#destroy\n\n\nLast step is destroy action. It is called by \nDELETE /:id\n action.\n\n\n// DELETE /:id\ndestroy(req, res, Db, next) {\n  Task.get(req.params.id, (err, task) => {\n    if (err) throw err;\n    task.remove((err, task) => {\n      res.redirect(\"/\");\n    })\n  })\n}\n\n\n\n\nThat's all! You made a todo app!",
            "title": "Todo App"
        },
        {
            "location": "/tutorials/todo/#making-todo-app",
            "text": "This page explains how to make a todo app with Airlane.",
            "title": "Making todo app"
        },
        {
            "location": "/tutorials/todo/#setup",
            "text": "Install Airlane with npm. At first You have to install Node.js.  npm install airlane -g  After installation, create project and setup it.  $ airlane init todo\n$ cd todo/\n$ npm install",
            "title": "Setup"
        },
        {
            "location": "/tutorials/todo/#create-module",
            "text": "You should create a database table named \"Task\". Airlane have provided O/R mapper and model generator.  $ airlane generate model db task\n/path/to/todo/modules/db/task.js created.\n/path/to/todo/migrations/001-create-tasks.js created.  Edit migration file  /path/to/todo/migrations/001-create-tasks.js .  Before: **  exports.up = function(next){\n  this.createTable('tasks', {\n      id         : { type : \"serial\", key: true }, // auto increment\n      created_at : { type : \"date\", time:true, required: true },\n      updated_at : { type : \"date\", time:true, required: true }\n  }, next);\n};\n\nexports.down = function(next){\n  this.dropTable('tasks', next);\n};  After:  exports.up = function(next){\n  this.createTable('tasks', {\n      id         : { type : \"serial\", key: true }, // auto increment\n      name       : { type : \"text\", required: true}, // Add this line\n      created_at : { type : \"date\", time:true, required: true },\n      updated_at : { type : \"date\", time:true, required: true }\n  }, next);\n};\n\nexports.down = function(next){\n  this.dropTable('tasks', next);\n};  Also edit model file  /path/to/todo/modules/db/task.js .  Before:  module.exports = (options) => {\n  return new Promise((res, rej) => {\n    var db = options.database;\n    var Task = db.define('tasks', {\n        id: { type: \"serial\", key: true },\n        created_at: { type: \"date\", time: true, defaultValue: (new Date)},\n        updated_at: { type: \"date\", time: true, defaultValue: (new Date)}\n      });\n    res({Task: Task});\n  })\n}  After:  module.exports = (options) => {\n  return new Promise((res, rej) => {\n    var db = options.database;\n    var Task = db.define('tasks', {\n        id: { type: \"serial\", key: true },\n        name: { type: \"text\", required: true }, // Add this line\n        created_at: { type: \"date\", time: true, defaultValue: (new Date)},\n        updated_at: { type: \"date\", time: true, defaultValue: (new Date)}\n      });\n    res({Task: Task});\n  })\n}  After editing, execute migration up command.  $ airlane migration up\n  up : 001-create-tasks.js\n  migration : complete  If you got some errors, you can try migration again after fix problems.  $ airlane migration down # This command do migration down\n$ airlane migration redo # This command do migration down and up.",
            "title": "Create module"
        },
        {
            "location": "/tutorials/todo/#import-bootstrap",
            "text": "Todo app uses bootstrap for design template. You should install it using npm command.  $ npm install bootstrap --save  After installed, update JavaScript file  routes/public/app.js *  global.jQuery = global.$ = require('jquery');\nrequire('bootstrap');\n$(() => {\n});  And  routes/public/app.css .  @import bootstrap;",
            "title": "Import bootstrap"
        },
        {
            "location": "/tutorials/todo/#launch-server",
            "text": "OK. You are ready to launch the server!  $ airlane serve  And access to  http://localhost:8080/ .",
            "title": "Launch server"
        },
        {
            "location": "/tutorials/todo/#router-and-controller",
            "text": "When you access to  http://localhost:8080/ , Router that located  routes/index.js  is called index action.  // GET /\n// Show index page\nrouter.get('/', (req, res, next) => {\n  controller.index(req, res, module.db, next);\n});  And router call the controller index action.  // GET /\nindex(req, res, next) {\n  res.render('index'); \n}  Response object (res) called render method with index. It means response uses  routes/views/index.jade * for rendering.  You will update those files.",
            "title": "Router and controller"
        },
        {
            "location": "/tutorials/todo/#update-view",
            "text": "Next step, you are editing view file located  routes/views/index.jade  like below. Airlane supports jade template (it's default). And this is bootstrap style class and format.  extends ./layout\nblock title\n  title Todo app\nblock body\n  div.container\n    div.row\n      div.col-md-8.col-md-offset-2\n        h1 Todo App\n        form(action=\"/\", method=\"POST\")\n          div.form-group\n            label(for=inputTask) Task name\n            input.form-control(name=\"name\", type=\"text\",placeholder=\"Study airlane\")\n          button.btn.btn-default(type=submit) Register task\n    div.row\n      div.col-md-8.col-md-offset-2\n        if tasks.length < 2\n          h2 #{tasks.length} Task\n        else\n          h2 #{tasks.length} Tasks\n\n        each task in tasks\n          div.row\n            div.col-md-3.col-md-offset-1\n              div #{task.name} \n            div.col-md-2\n              span\n                form(action=\"/#{task.id}\",method=\"POST\")\n                  input.hidden(name=\"_method\",value=\"DELETE\")\n                  button.btn.btn-ms.btn-default done  You can recognize a various  tasks  that provides from controller.",
            "title": "Update view"
        },
        {
            "location": "/tutorials/todo/#edit-controllerindex",
            "text": "You should edit controller file located  routes/controller.js  for access to  GET / .  index(req, res, next) {\n  let Task = module.db.Task;\n  Task.find((err, tasks) => {\n    if (err) throw err;\n    res.render('index', {tasks: tasks}); \n  });\n}",
            "title": "Edit controller#index"
        },
        {
            "location": "/tutorials/todo/#edit-controllerpost",
            "text": "Next is create action. It is called by  POST /  action.  // POST /\ncreate(req, res, next) {\n  let Task = module.db.Task;\n  Task.create({\n    name: req.body.name\n  }, (err, task) => {\n    if (err) throw err;\n    res.redirect(\"/\");\n  })\n}",
            "title": "Edit controller#post"
        },
        {
            "location": "/tutorials/todo/#edit-controllerdestroy",
            "text": "Last step is destroy action. It is called by  DELETE /:id  action.  // DELETE /:id\ndestroy(req, res, Db, next) {\n  Task.get(req.params.id, (err, task) => {\n    if (err) throw err;\n    task.remove((err, task) => {\n      res.redirect(\"/\");\n    })\n  })\n}  That's all! You made a todo app!",
            "title": "Edit controller#destroy"
        }
    ]
}