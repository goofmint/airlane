#!/usr/bin/env node
var fs = require('fs-extra');
require('../libs/common');
let util = require('./util');

/*
var program = require('commander');
program
  .version('0.0.1')
  .parse(process.argv);
*/
let app_name = process.argv[2];
let target_dir = fs.realpathSync('./');
target_dir = `${target_dir}/${app_name}`;
if (target_dir.slice(-1) != '/') {
  target_dir = target_dir + "/";
}

var paths = ['tmp', 'modules', 'config.js', 'package.json', 'routes/index.js', 'routes/controller.js', 'routes/public/app.js', 'routes/public/app.css', 'routes/views/layout.jade', 'routes/views/index.jade', 'routes/views/new.jade', 'routes/views/edit.jade', 'routes/test/controller_test.js'];
var templates;

require('./templates')(app_name, true)
  .then(results => {
    templates = results;
    var promises = util.checkFile(target_dir, paths);
    return util.doAsk(promises);
  }, error => {
    console.log(error)
    process.exit(1);
  })
  .then( answers => {
    createBase(answers);
  }, error => {
    console.log(error);
    process.exit(1);
  })

createBase = (answers = {}) => {
  fs.mkdirsSync(target_dir);
  var dirs = ['tmp', 'modules', 'routes', 'routes/test', 'routes/views', 'routes/public'];
  for (var i in dirs) {
    var dir = dirs[i];
    fs.mkdirsSync(`${target_dir}/${dir}`);
  }
  for (var i in paths) {
    var filename = paths[i];
    if (answers[`overwrite_${filename}`] !== false && templates[filename]) {
      fs.writeFileSync(`${target_dir}/${filename}`, templates[filename]);
    }
  }
  for (var i in templates.init) {
    if (answers[`overwrite_${i}`] !== false) {
      fs.writeFileSync(`${target_dir}/${i}`, templates.init[i]);
    }
  }
}
